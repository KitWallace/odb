
import module namespace date = "http://kitwallace.me/date" at "/db/lib/date.xqm";

declare option exist:serialize "method=xhtml media-type=text/html";

declare function local:minutes_to_days_hrs_min($mins) {
    if ($mins < 60) 
    then concat($mins, " mins")
    else let $hours := $mins div 60
         let $full_hours := floor($hours)
         let $full_mins := $mins - $full_hours * 60
         return
            if ($full_hours >24) 
            then 
                let $days := $full_hours div 24
                let $full_days := floor($days)
                let $rem_hours := $full_hours - $full_days * 24
                return concat($full_days," days,",$rem_hours," hrs,",$full_mins," mins")
            else 
                concat($full_hours," hrs, ",$full_mins, " mins")
};

<html> 
<h3>Status of <a href="https://opendata.bristol.gov.uk/">Open data Bristol</a> real time streams at {format-dateTime(current-dateTime(),"[H01]:[m01] [MNn] [D01] '[Y01] ")}</h3>
<table>
  <tr>
    <th>Stream</th>
    <th>Rows</th>
    <th>Frequency</th>
    <th>Minimum Age</th>
    <th>Health</th>
    <th>Maximum Age</th>
    <th>Health</th>

  </tr>
  {
 let $config := doc("./data/realtimefeeds.xml")
 for $feed in $config//feed
 let $dataurl := concat("https://opendata.bristol.gov.uk/api/views/",$feed/setid,"/rows.xml?accessType=DOWNLOAD")
 let $data := doc($dataurl)
 let $rows := $data//row[@_id]
 let $dateTimeCode := $feed/dateTime/code
 let $ages := 
     if (exists($dateTimeCode))
     then distinct-values(
        for $row in $rows
        let $dateTime := util:eval($dateTimeCode)
        let $age_min := if(exists($dateTime)) then round((current-dateTime() - xs:dateTime($dateTime)) div xs:dayTimeDuration("PT1M")) else ()
        order by $age_min 
        return $age_min
        )
      else ()
 let $freqmin := if ($feed/frequency/@unit="hours") 
                 then 60 * number($feed/frequency)
                 else  if ($feed/frequency/@unit="minutes") 
                 then  number($feed/frequency)
                 else ()
 let $minage := $ages[1]
 let $maxage := $ages[last()]
 return
    <tr>
      <th  style="text-align:left"><a href="{$feed/pageurl}">{$feed/title/string()}</a></th> 
      <td>{count($rows)} {if (exists($feed/rows)) then concat (" of ",$feed/rows) else ()}</td>
      <td>{concat($feed/frequency," ",$feed/frequency/@unit)}</td>
      <td> {if (exists($minage)) then local:minutes_to_days_hrs_min($minage) else ()} </td>
      <td> {if (not (exists($freqmin)) or (not (exists($ages))))
            then <span style="background-color: pink"> unknown</span> 
            else if ($minage <= 1.2* $freqmin) 
            then <span style="background-color: green"> &lt; 20% late</span>
            else if ($minage <= 2* $freqmin) 
            then <span style="background-color: orange"> &lt; 100% late</span>
            else <span style="background-color: red"> &gt;= 100% late</span>
           }
      </td>
      <td>{if (exists($maxage)) then local:minutes_to_days_hrs_min($maxage) else () } </td>
      <td>{if (not (exists($freqmin)) or (not (exists($ages))))
             then <span style="background-color: pink"> unknown</span> 
             else if ($maxage <= 1.2* $freqmin) 
             then <span style="background-color: green"> &lt; 20% late</span>
             else if ($maxage <= 2* $freqmin) 
             then <span style="background-color: orange"> &lt; 100% late</span>
             else <span style="background-color: red"> &gt;= 100% late</span>
            }
       </td> 
     </tr>
 }
 </table>
 <hr/>
 <div>Configuration data in <a href="data/realtimefeeds.xml">Configuration and stream metadata</a></div>
 <div>This dashboard was made by <a href="http://kitwallace.co.uk"> Chris Wallace </a> on 23 March 2016 using XQuery (source on Github) on an eXist-db database.  </div>

 </html>
